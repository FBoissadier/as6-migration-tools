name: Build and Release

# We push commits and create/delete tags & releases
permissions:
  contents: write

on:
  push:
    branches: [ main ]
    # Do not trigger a new run when the bump commit only touches version.txt
    paths-ignore:
      - 'version.txt'

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump.outputs.new_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - id: bump
        name: Read and bump version
        shell: bash
        run: |
          set -Eeuo pipefail
          # Guard: version.txt must exist and contain a single non-negative integer.
          # Rationale: This file is maintained by CI; failing fast avoids releasing with a wrong/empty version.
          if [[ ! -f version.txt ]]; then
            echo "version.txt is missing. This file is maintained by CI. Do not delete or edit it." >&2
            exit 1
          fi

          VERSION=$(<version.txt)
          if ! [[ "$VERSION" =~ ^[0-9]+$ ]]; then
            echo "Invalid version in version.txt: '$VERSION'. Expected a non-negative integer. Do not edit this file manually." >&2
            exit 1
          fi

          NEW_VERSION=$((VERSION + 1))
          printf '%s\n' "$NEW_VERSION" > version.txt
          echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"

      - name: Commit bumped version
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@github.com"
          git add version.txt
          git commit -m "Bump version to ${{ steps.bump.outputs.new_version }}"
          git push

  build:
    needs: prepare
    runs-on: windows-latest
    steps:
      # Always build from the latest commit on main (includes the bump commit)
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      # Belt-and-suspenders: ensure the bumped version is present even if the checkout was cached
      - name: Ensure bumped version file
        shell: bash
        run: echo "${{ needs.prepare.outputs.version }}" > version.txt

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Requirements
        run: pip install -r requirements.txt

      - name: Install PyInstaller
        run: pip install pyinstaller

      - name: Build executable
        run: pyinstaller --noconfirm gui_launcher.spec

      - name: Zip EXE and all contents of dist/
        shell: pwsh
        run: |
          Compress-Archive -Path "dist\*" -DestinationPath "dist\as6-migration-tools.zip"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts
          path: dist/as6-migration-tools.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # Use the latest main for source zip
      - uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Create source archive
        uses: TheDoctor0/zip-release@0.7.1
        with:
          filename: source-code.zip
          exclusions: .git, .github, __pycache__, *.pyc

      - name: Download GUI artifact
        uses: actions/download-artifact@v4
        with:
          name: release-artifacts
          path: release

      # Remove the previous release object if it exists
      - name: Delete previous release (if exists)
        run: gh release delete latest --yes || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Ensure the 'latest' tag is removed so it can be recreated on the new commit
      - name: Delete previous tag (if exists)
        run: |
          git fetch --tags
          git push origin :refs/tags/latest || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release (always one)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          target_commitish: main   # create the tag on the newest main commit
          name: "AS6 Migration Tools"
          body: |
            ✅ This release contains:
            - The latest GUI tool (`as6-migration-tools.zip`)
            - The latest source code (`source-code.zip`)

            ⚠️ *Please ignore the "Source code (zip/tar.gz)" links below.*
            They are auto-generated by GitHub and may be empty or may not reflect the latest code.
          files: |
            release/as6-migration-tools.zip
            source-code.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
